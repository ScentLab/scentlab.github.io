/* src/components/Commons/TooltipBtn.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "../../../_snowpack/pkg/svelte/internal.js";

import { createPopper } from "../../../_snowpack/pkg/@popperjs/core.js";

function create_fragment(ctx) {
	let div5;
	let div4;
	let button;
	let t0;
	let t1;
	let div3;
	let div2;
	let div0;
	let t2;
	let t3;
	let div1;
	let t4;
	let mounted;
	let dispose;

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			button = element("button");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t2 = text(/*descHead*/ ctx[1]);
			t3 = space();
			div1 = element("div");
			t4 = text(/*descBody*/ ctx[2]);
			attr(button, "type", "button");
			set_style(button, "transition", "all .15s ease");
			attr(button, "class", "bg-pink-500 text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1");
			attr(div0, "class", "bg-pink-600 text-white opacity-75 font-semibold p-3 mb-0 border-b border-solid border-gray-200 uppercase rounded-t-lg");
			attr(div1, "class", "text-white p-3");
			attr(div3, "id", tooltipId);
			attr(div3, "class", "hidden bg-pink-600 border-0 mt-3 z-50 font-normal leading-normal text-sm max-w-xs text-left no-underline break-words rounded-lg");
			attr(div4, "class", "w-full text-center");
			attr(div5, "class", "flex flex-wrap");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, button);
			append(button, t0);
			append(div4, t1);
			append(div4, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, t2);
			append(div2, t3);
			append(div2, div1);
			append(div1, t4);

			if (!mounted) {
				dispose = [
					listen(button, "mouseenter", /*toggleTooltip*/ ctx[3]),
					listen(button, "mouseleave", /*toggleTooltip*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*descHead*/ 2) set_data(t2, /*descHead*/ ctx[1]);
			if (dirty & /*descBody*/ 4) set_data(t4, /*descBody*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			mounted = false;
			run_all(dispose);
		}
	};
}

const tooltipId = "tooltip";

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props, { descHead } = $$props, { descBody } = $$props;
	let { placement } = $$props;

	const toggleTooltip = event => {
		let popcorn = event.target;

		// while(popcorn.nodeName !== "BUTTON"){
		//     popcorn = popcorn.parentNode;
		// }
		const tooltip = document.getElementById(tooltipId);

		const popper = createPopper(popcorn, tooltip, { placement });
		tooltip.classList.toggle("hidden");
	};

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("descHead" in $$props) $$invalidate(1, descHead = $$props.descHead);
		if ("descBody" in $$props) $$invalidate(2, descBody = $$props.descBody);
		if ("placement" in $$props) $$invalidate(4, placement = $$props.placement);
	};

	return [title, descHead, descBody, toggleTooltip, placement];
}

class TooltipBtn extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			descHead: 1,
			descBody: 2,
			placement: 4
		});
	}
}

export default TooltipBtn;